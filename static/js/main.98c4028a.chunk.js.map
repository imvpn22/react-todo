{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCurrentText","e","inputText","target","value","setState","createTodoItem","preventDefault","addItem","state","createItemHtml","item","editable","react_default","a","createElement","className","isDone","key","_id","type","text","onChange","activeEdit","autoFocus","onClick","saveItem","deleteItem","doneItem","editItem","_this2","items","listItems","filter","map","doneItems","onSubmit","ref","newItemRef","currentItem","placeholder","required","Component","API_BASE_URL","App","addTodo","newItem","addTodoInBackend","Date","now","push","updateTodo","todo","updateTodoInBackend","deleteTodo","deleteTodoFromBackend","handleItemChange","isDeleted","itemId","updateLocalStorage","data","localStorage","setItem","JSON","stringify","getTodosFromBackend","axios","get","then","res","todos","catch","err","console","log","put","post","todoId","delete","React","createRef","current","focus","ls","getItem","parse","length","src_TodoList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.98c4028a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: ''\n    };\n  }\n\n  updateCurrentText = e => {\n    const inputText = e.target.value;\n    this.setState({ inputText });\n  };\n\n  createTodoItem = e => {\n    e.preventDefault();\n    this.props.addItem(this.state.inputText);\n  };\n\n  createItemHtml = item => {\n    if (item.editable) {\n      return (\n        <div\n          className={'item ' + (item.isDone ? 'doneItem' : 'activeItem')}\n          key={item._id}\n        >\n          <label>\n            <i\n              className={\n                'far ' + (item.isDone ? 'fa-check-circle' : 'fa-circle')\n              }\n            />\n            <input\n              type=\"text\"\n              value={item.text}\n              onChange={e => this.props.activeEdit(item._id, e)}\n              autoFocus={true}\n            />\n          </label>\n          <span>\n            <button onClick={() => this.props.saveItem(item)}>\n              <i className=\"far fa-save\" />\n            </button>\n            <button onClick={() => this.props.deleteItem(item)}>\n              <i className=\"far fa-trash-alt\" />\n            </button>\n          </span>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className={'item ' + (item.isDone ? 'doneItem' : 'activeItem')}\n          key={item._id}\n        >\n          <label onClick={() => this.props.doneItem(item)}>\n            <i\n              className={\n                'far ' + (item.isDone ? 'fa-check-circle' : 'fa-circle')\n              }\n            />\n            <span>{item.text}</span>\n          </label>\n          <span>\n            <button onClick={() => this.props.editItem(item._id)}>\n              <i className=\"fas fa-pencil-alt\" />\n            </button>\n            <button onClick={() => this.props.deleteItem(item)}>\n              <i className=\"far fa-trash-alt\" />\n            </button>\n          </span>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    let items = this.props.items;\n    let listItems = items\n      .filter(item => !item.isDone)\n      .map(item => this.createItemHtml(item));\n    let doneItems = items\n      .filter(item => item.isDone)\n      .map(item => this.createItemHtml(item));\n\n    return (\n      <div className=\"main\">\n        <div className=\"header\">ToDo</div>\n        <div className=\"itemList\">\n          <form className=\"newItem item\" onSubmit={this.createTodoItem}>\n            <input\n              ref={this.props.newItemRef}\n              value={this.props.currentItem.text}\n              onChange={e => this.updateCurrentText(e)}\n              type=\"text\"\n              placeholder=\"Add new item\"\n              required\n            />\n            <button type=\"submit\">\n              <i className=\"fas fa-check\" />\n            </button>\n          </form>\n          {listItems}\n          {doneItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import axios from 'axios';\nimport React, { Component } from 'react';\nimport TodoList from './TodoList';\n\n// const API_BASE_URL = 'http://localhost:8000/api';\nconst API_BASE_URL = 'https://imvpn22-todo.herokuapp.com/api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.newItemRef = React.createRef();\n    this.state = {\n      currentItem: {},\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.newItemRef.current.focus();\n    const ls = localStorage.getItem('todos');\n    let todos = [];\n\n    try {\n      todos = JSON.parse(ls);\n    } catch (e) {\n      console.log(e);\n    }\n\n    if (todos && todos.length) {\n      this.setState({ items: todos });\n    }\n\n    // call\n    this.getTodosFromBackend();\n  }\n\n  addTodo = text => {\n    const newItem = { text };\n    this.addTodoInBackend(newItem);\n    const { items } = this.state;\n    newItem._id = Date.now();\n    items.push(newItem);\n    this.setState({ items });\n  };\n\n  updateTodo = todo => {\n    this.updateTodoInBackend(todo);\n    const items = this.state.items.map(item => {\n      if (item._id === todo._id) {\n        return todo;\n      }\n      return item;\n    });\n    this.setState({ items });\n  };\n\n  deleteTodo = todo => {\n    this.deleteTodoFromBackend(todo._id);\n    const items = this.state.items.filter(item => item._id !== todo._id);\n    this.setState({ items });\n  };\n\n  handleItemChange = text => {\n    let currentItem = {\n      text: text\n    };\n    this.setState({ currentItem });\n  };\n\n  doneItem = item => {\n    item.isDone = !item.isDone;\n    this.updateTodo(item);\n  };\n\n  deleteItem = item => {\n    item.isDeleted = true;\n    this.updateTodo(item);\n  };\n\n  editItem = itemId => {\n    let items = this.state.items;\n    items = items.map(item => {\n      if (item._id === itemId) item.editable = !item.editable;\n      return item;\n    });\n    this.setState({ items });\n  };\n\n  saveItem = item => {\n    item.editable = false;\n    this.updateTodo(item);\n  };\n\n  activeEdit = (itemId, e) => {\n    let text = e.target.value;\n    let items = this.state.items;\n    items = items.map(item => {\n      if (item._id === itemId) item.text = text;\n      return item;\n    });\n    this.setState({ items });\n    // this.updateLocalStorage(items);\n  };\n\n  updateLocalStorage = data => {\n    localStorage.setItem('todos', JSON.stringify(data));\n  };\n\n  getTodosFromBackend = () => {\n    axios\n      .get(API_BASE_URL + '/todos')\n      .then(res => {\n        const { todos } = res.data;\n        this.setState({ items: todos });\n        this.updateLocalStorage(todos);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  updateTodoInBackend = todo => {\n    axios\n      .put(API_BASE_URL + '/todos', todo)\n      .then(res => {\n        // console.log(res);\n        // const { todos } = res.data;\n        // this.setState({ items: todos });\n        this.getTodosFromBackend();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  addTodoInBackend = data => {\n    axios\n      .post(API_BASE_URL + '/todos', data)\n      .then(res => {\n        this.getTodosFromBackend();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  deleteTodoFromBackend = todoId => {\n    axios\n      .delete(API_BASE_URL + '/todos/' + todoId)\n      .then(res => {\n        // console.log('delete success', res.data);\n        this.getTodosFromBackend();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <TodoList\n          items={this.state.items}\n          newItemRef={this.newItemRef}\n          currentItem={this.state.currentItem}\n          handleItemChange={this.handleItemChange}\n          addItem={this.addTodo}\n          doneItem={this.doneItem}\n          deleteItem={this.deleteItem}\n          editItem={this.editItem}\n          activeEdit={this.activeEdit}\n          saveItem={this.saveItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}