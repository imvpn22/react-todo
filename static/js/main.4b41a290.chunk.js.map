{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","createItem","item","editable","react_default","a","createElement","className","done","key","id","type","value","text","onChange","e","_this","props","activeEdit","autoFocus","onClick","editItem","deleteItem","doneItem","_this2","this","items","listItems","filter","map","doneItems","onSubmit","addItem","ref","newItemRef","currentItem","handleItemChange","placeholder","required","Component","DUMMY_DATA","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","preventDefault","newItem","state","concat","toConsumableArray","setState","updateLocalStorage","target","Date","now","itemId","data","localStorage","setItem","JSON","stringify","React","createRef","current","focus","ls","getItem","todos","parse","console","log","length","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b41a290.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoList extends Component {\n  createItem = item => {\n    if (item.editable) {\n      return (\n        <div\n          className={'item ' + (item.done ? 'doneItem' : 'activeItem')}\n          key={item.id}\n        >\n          <label>\n            <i\n              className={'far ' + (item.done ? 'fa-check-circle' : 'fa-circle')}\n            />\n            <input\n              type=\"text\"\n              value={item.text}\n              onChange={e => this.props.activeEdit(item.id, e)}\n              autoFocus={true}\n            />\n          </label>\n          <span>\n            <button onClick={() => this.props.editItem(item.id)}>\n              <i className=\"far fa-save\" />\n            </button>\n            <button onClick={() => this.props.deleteItem(item.id)}>\n              <i className=\"far fa-trash-alt\" />\n            </button>\n          </span>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className={'item ' + (item.done ? 'doneItem' : 'activeItem')}\n          key={item.id}\n        >\n          <label onClick={() => this.props.doneItem(item.id)}>\n            <i\n              className={'far ' + (item.done ? 'fa-check-circle' : 'fa-circle')}\n            />\n            <span>{item.text}</span>\n          </label>\n          <span>\n            <button onClick={() => this.props.editItem(item.id)}>\n              <i className=\"fas fa-pencil-alt\" />\n            </button>\n            <button onClick={() => this.props.deleteItem(item.id)}>\n              <i className=\"far fa-trash-alt\" />\n            </button>\n          </span>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    let items = this.props.items;\n    let listItems = items\n      .filter(item => !item.done)\n      .map(item => this.createItem(item));\n    let doneItems = items\n      .filter(item => item.done)\n      .map(item => this.createItem(item));\n\n    return (\n      <div className=\"main\">\n        <div className=\"header\">ToDo</div>\n        <div className=\"itemList\">\n          <form className=\"newItem item\" onSubmit={e => this.props.addItem(e)}>\n            <input\n              ref={this.props.newItemRef}\n              value={this.props.currentItem.text}\n              onChange={e => this.props.handleItemChange(e)}\n              type=\"text\"\n              placeholder=\"Add new item\"\n              required\n            />\n            <button type=\"submit\">\n              <i className=\"fas fa-check\" />\n            </button>\n          </form>\n          {listItems}\n          {doneItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport TodoList from './TodoList';\n\nconst DUMMY_DATA = [\n  {\n    id: 1,\n    text: 'Dummy 1',\n    done: true\n  },\n  {\n    id: 8,\n    text: 'Dummy 2',\n    done: false\n  }\n];\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.newItemRef = React.createRef();\n    this.state = {\n      currentItem: { text: '', id: '', done: false },\n      items: DUMMY_DATA\n    };\n  }\n\n  componentDidMount() {\n    this.newItemRef.current.focus();\n    const ls = localStorage.getItem('todos');\n    let todos = [];\n\n    try {\n      todos = JSON.parse(ls);\n    } catch (e) {\n      console.log(e);\n    }\n\n    if (todos && todos.length) {\n      this.setState({ items: todos });\n    }\n  }\n\n  addItem = e => {\n    e.preventDefault();\n    let newItem = this.state.currentItem;\n    if (!!newItem.text) {\n      let items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: { text: '', key: '', done: false }\n      });\n      this.updateLocalStorage(items);\n    }\n  };\n\n  handleItemChange = e => {\n    let text = e.target.value;\n    let currentItem = {\n      text: text,\n      id: Date.now()\n    };\n    this.setState({ currentItem });\n  };\n\n  doneItem = itemId => {\n    let items = this.state.items;\n    items = items.map(item => {\n      if (itemId === item.id) {\n        item.done = !item.done;\n      }\n      return item;\n    });\n    this.setState({ items });\n    this.updateLocalStorage(items);\n  };\n\n  deleteItem = itemId => {\n    let items = this.state.items;\n    items = items.filter(item => itemId !== item.id);\n    this.setState({ items });\n    this.updateLocalStorage(items);\n  };\n\n  editItem = itemId => {\n    let items = this.state.items;\n    items = items.map(item => {\n      if (item.id === itemId) item.editable = !item.editable;\n      return item;\n    });\n    this.setState({ items });\n    this.updateLocalStorage(items);\n  };\n\n  activeEdit = (itemId, e) => {\n    let text = e.target.value;\n    let items = this.state.items;\n    items = items.map(item => {\n      if (item.id === itemId) item.text = text;\n      return item;\n    });\n    this.setState({ items });\n    this.updateLocalStorage(items);\n  };\n\n  updateLocalStorage = data => {\n    localStorage.setItem('todos', JSON.stringify(data));\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <TodoList\n          items={this.state.items}\n          newItemRef={this.newItemRef}\n          currentItem={this.state.currentItem}\n          handleItemChange={this.handleItemChange}\n          addItem={this.addItem}\n          doneItem={this.doneItem}\n          deleteItem={this.deleteItem}\n          editItem={this.editItem}\n          activeEdit={this.activeEdit}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}