{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCurrentText","e","inputText","target","value","setState","createTodoItem","preventDefault","addItem","state","createItemHtml","item","editable","react_default","a","createElement","className","isDone","key","_id","type","text","onChange","activeEdit","autoFocus","onClick","editItem","deleteItem","doneItem","_this2","items","listItems","filter","map","doneItems","onSubmit","ref","newItemRef","currentItem","placeholder","required","Component","API_BASE_URL","App","newItem","addTodoInBackend","Date","now","push","handleItemChange","itemId","updateTodoInBackend","deleteTodoFromBackend","updateLocalStorage","data","localStorage","setItem","JSON","stringify","getTodosFromBackend","axios","get","then","res","todos","catch","err","console","log","todo","put","post","todoId","delete","React","createRef","current","focus","ls","getItem","parse","length","src_TodoList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0711de58.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: ''\n    };\n  }\n\n  updateCurrentText = e => {\n    const inputText = e.target.value;\n    this.setState({ inputText });\n  };\n\n  createTodoItem = e => {\n    e.preventDefault();\n    this.props.addItem(this.state.inputText);\n  };\n\n  createItemHtml = item => {\n    if (item.editable) {\n      return (\n        <div\n          className={'item ' + (item.isDone ? 'doneItem' : 'activeItem')}\n          key={item._id}\n        >\n          <label>\n            <i\n              className={\n                'far ' + (item.isDone ? 'fa-check-circle' : 'fa-circle')\n              }\n            />\n            <input\n              type=\"text\"\n              value={item.text}\n              onChange={e => this.props.activeEdit(item._id, e)}\n              autoFocus={true}\n            />\n          </label>\n          <span>\n            <button onClick={() => this.props.editItem(item._id)}>\n              <i className=\"far fa-save\" />\n            </button>\n            <button onClick={() => this.props.deleteItem(item._id)}>\n              <i className=\"far fa-trash-alt\" />\n            </button>\n          </span>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className={'item ' + (item.isDone ? 'doneItem' : 'activeItem')}\n          key={item._id}\n        >\n          <label onClick={() => this.props.doneItem(item._id)}>\n            <i\n              className={\n                'far ' + (item.isDone ? 'fa-check-circle' : 'fa-circle')\n              }\n            />\n            <span>{item.text}</span>\n          </label>\n          <span>\n            <button onClick={() => this.props.editItem(item._id)}>\n              <i className=\"fas fa-pencil-alt\" />\n            </button>\n            <button onClick={() => this.props.deleteItem(item._id)}>\n              <i className=\"far fa-trash-alt\" />\n            </button>\n          </span>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    let items = this.props.items;\n    let listItems = items\n      .filter(item => !item.isDone)\n      .map(item => this.createItemHtml(item));\n    let doneItems = items\n      .filter(item => item.isDone)\n      .map(item => this.createItemHtml(item));\n\n    return (\n      <div className=\"main\">\n        <div className=\"header\">ToDo</div>\n        <div className=\"itemList\">\n          <form className=\"newItem item\" onSubmit={this.createTodoItem}>\n            <input\n              ref={this.props.newItemRef}\n              value={this.props.currentItem.text}\n              onChange={e => this.updateCurrentText(e)}\n              type=\"text\"\n              placeholder=\"Add new item\"\n              required\n            />\n            <button type=\"submit\">\n              <i className=\"fas fa-check\" />\n            </button>\n          </form>\n          {listItems}\n          {doneItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import axios from 'axios';\nimport React, { Component } from 'react';\nimport TodoList from './TodoList';\n\n// const API_BASE_URL = 'http://localhost:8000/api';\nconst API_BASE_URL = 'https://imvpn22-todo.herokuapp.com/api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.newItemRef = React.createRef();\n    this.state = {\n      currentItem: {},\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.newItemRef.current.focus();\n    const ls = localStorage.getItem('todos');\n    let todos = [];\n\n    try {\n      todos = JSON.parse(ls);\n    } catch (e) {\n      console.log(e);\n    }\n\n    if (todos && todos.length) {\n      this.setState({ items: todos });\n    }\n\n    // call\n    this.getTodosFromBackend();\n  }\n\n  addItem = text => {\n    const newItem = { text };\n    this.addTodoInBackend(newItem);\n\n    const { items } = this.state;\n    newItem._id = Date.now();\n    items.push(newItem);\n    this.setState({ items });\n  };\n\n  handleItemChange = text => {\n    let currentItem = {\n      text: text\n    };\n    this.setState({ currentItem });\n  };\n\n  doneItem = itemId => {\n    let items = this.state.items;\n    items = items.map(item => {\n      if (itemId === item._id) {\n        item.isDone = !item.isDone;\n        this.updateTodoInBackend(item);\n      }\n      return item;\n    });\n    this.setState({ items });\n    // this.updateLocalStorage(items);\n  };\n\n  deleteItem = itemId => {\n    this.deleteTodoFromBackend(itemId);\n    const items = this.state.items.filter(item => itemId !== item._id);\n    this.setState({ items });\n  };\n\n  editItem = itemId => {\n    let items = this.state.items;\n    items = items.map(item => {\n      if (item._id === itemId) item.editable = !item.editable;\n      return item;\n    });\n    this.setState({ items });\n    this.updateLocalStorage(items);\n  };\n\n  activeEdit = (itemId, e) => {\n    let text = e.target.value;\n    let items = this.state.items;\n    items = items.map(item => {\n      if (item._id === itemId) item.text = text;\n      return item;\n    });\n    this.setState({ items });\n    // this.updateLocalStorage(items);\n  };\n\n  updateLocalStorage = data => {\n    localStorage.setItem('todos', JSON.stringify(data));\n  };\n\n  getTodosFromBackend = () => {\n    axios\n      .get(API_BASE_URL + '/todos')\n      .then(res => {\n        const { todos } = res.data;\n        this.setState({ items: todos });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  updateTodoInBackend = todo => {\n    axios\n      .put(API_BASE_URL + '/todos', todo)\n      .then(res => {\n        console.log(res);\n        // const { todos } = res.data;\n        // this.setState({ items: todos });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  addTodoInBackend = data => {\n    axios\n      .post(API_BASE_URL + '/todos', data)\n      .then(res => {\n        this.getTodosFromBackend();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  deleteTodoFromBackend = todoId => {\n    axios\n      .delete(API_BASE_URL + '/todos/' + todoId)\n      .then(res => {\n        // console.log('delete success', res.data);\n        this.getTodosFromBackend();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <TodoList\n          items={this.state.items}\n          newItemRef={this.newItemRef}\n          currentItem={this.state.currentItem}\n          handleItemChange={this.handleItemChange}\n          addItem={this.addItem}\n          doneItem={this.doneItem}\n          deleteItem={this.deleteItem}\n          editItem={this.editItem}\n          activeEdit={this.activeEdit}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}