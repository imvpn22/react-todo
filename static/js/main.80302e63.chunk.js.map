{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","createItem","item","editable","react_default","a","createElement","className","done","key","id","type","value","text","onChange","e","_this","props","activeEdit","autoFocus","onClick","editItem","deleteItem","doneItem","_this2","this","items","listItems","filter","map","doneItems","onSubmit","addItem","ref","newItemRef","currentItem","handleItemChange","placeholder","required","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","preventDefault","newItem","state","concat","toConsumableArray","setState","target","Date","now","itemId","React","createRef","current","focus","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80302e63.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoList extends Component {\n\n    createItem = (item) => {\n        if (item.editable) {\n            return <div className={\"item \" + (item.done ? \"doneItem\" : \"activeItem\")} key={item.id}>\n                <label>\n                    <i className={\"far \" + (item.done ? \"fa-check-circle\" : \"fa-circle\")}></i>\n                    <input type=\"text\" value={item.text} onChange={e => this.props.activeEdit(item.id, e)} autoFocus={true}/>\n                </label>\n                <span>\n                    <button onClick={() => this.props.editItem(item.id)}><i className=\"far fa-save\"></i></button>\n                    <button onClick={() => this.props.deleteItem(item.id)}><i className=\"far fa-trash-alt\"></i></button>\n                </span>\n            </div>\n        } else {\n            return <div className={\"item \" + (item.done ? \"doneItem\" : \"activeItem\")} key={item.id}>\n                <label onClick={() => this.props.doneItem(item.id)}>\n                    <i className={\"far \" + (item.done ? \"fa-check-circle\" : \"fa-circle\")}></i>\n                    <span>{item.text}</span>\n                </label>\n                <span>\n                    <button onClick={() => this.props.editItem(item.id)}><i className=\"fas fa-pencil-alt\"></i></button>\n                    <button onClick={() => this.props.deleteItem(item.id)}><i className=\"far fa-trash-alt\"></i></button>\n                </span>\n            </div>\n        }\n    };\n\n    render() {\n\n        let items = this.props.items;\n        let listItems = items.filter(item => !item.done).map(item => this.createItem(item));\n        let doneItems = items.filter(item => item.done).map(item => this.createItem(item));\n\n        return (\n            <div className = \"main\">\n                <div className=\"header\">\n                    ToDo\n                </div>\n                <div className=\"itemList\">\n                    <form className=\"newItem item\" onSubmit={e => this.props.addItem(e)}>\n                        <input ref={this.props.newItemRef}\n                                value={this.props.currentItem.text}\n                                onChange={e => this.props.handleItemChange(e)}\n                                type=\"text\" placeholder=\"Add new item\" required />\n                        <button type=\"submit\"><i className=\"fas fa-check\"></i></button>\n                    </form>\n                    {listItems}\n                    {doneItems}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoList\n","import React, { Component } from 'react';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.newItemRef = React.createRef();\n        this.state = {\n            currentItem: {text:'', id:'', done:false},\n            items: [{\n                    id: 1,\n                    text: 'Think about idea',\n                    done: true\n                }, {\n                    id: 2,\n                    text: 'Publish on Github',\n                    done: true\n                }, {\n                    id: 3,\n                    text: 'Add style',\n                    done: true\n                }, {\n                    id: 4,\n                    text: 'What to do',\n                    done: true\n                }, {\n                    id: 5,\n                    text: 'What to do',\n                    done: true\n                }, {\n                    id: 6,\n                    text: 'Optimize for mobile view',\n                    done: false\n                }, {\n                    id: 7,\n                    text: 'Add PWA features',\n                    done: false\n                }, {\n                    id: 8,\n                    text: 'Complete this project',\n                    done: false\n                },\n            ]\n        }\n    }\n\n    componentDidMount() {\n        this.newItemRef.current.focus()\n    }\n\n    addItem = (e) => {\n        e.preventDefault();\n        let newItem = this.state.currentItem;\n        if (!!newItem.text) {\n            let items = [...this.state.items, newItem]\n            this.setState({\n                items: items,\n                currentItem: { text: '', key: '', done:false }\n            });\n        }\n    };\n\n    handleItemChange = e => {\n        let text = e.target.value;\n        let currentItem = {\n            text: text,\n            id: Date.now()\n        };\n        this.setState({currentItem});\n    };\n\n    doneItem = (itemId) => {\n        let items = this.state.items;\n        items = items.map(item => {\n            if (itemId === item.id) {\n                item.done = !item.done;\n            }\n            return item;\n        });\n        this.setState({items});\n    };\n\n    deleteItem = (itemId) => {\n        let items = this.state.items;\n        items = items.filter(item => itemId !== item.id);\n        this.setState({items});\n    };\n\n    editItem = (itemId) => {\n        let items = this.state.items;\n        items = items.map(item => {\n            if (item.id === itemId) item.editable = !item.editable;\n            return item;\n        });\n        this.setState({items});\n    };\n\n    activeEdit = (itemId, e) => {\n        let text = e.target.value;\n        let items = this.state.items;\n        items = items.map(item => {\n            if (item.id === itemId) item.text = text;\n            return item;\n        });\n        this.setState({items});\n    };\n\n\n  render() {\n    return (\n        <div className=\"container\">\n            <TodoList\n                items={this.state.items}\n                newItemRef={this.newItemRef}\n                currentItem={this.state.currentItem}\n                handleItemChange={this.handleItemChange}\n                addItem={this.addItem}\n                doneItem={this.doneItem}\n                deleteItem={this.deleteItem}\n                editItem={this.editItem}\n                activeEdit={this.activeEdit}\n            />\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}